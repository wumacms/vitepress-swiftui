import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.Dgg8-8ov.js";const c=JSON.parse('{"title":"SwiftUI 项目结构解析","description":"","frontmatter":{},"headers":[],"relativePath":"getting-started/structure.md","filePath":"getting-started/structure.md"}'),n={name:"getting-started/structure.md"};function p(l,s,h,r,d,o){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="swiftui-项目结构解析" tabindex="-1">SwiftUI 项目结构解析 <a class="header-anchor" href="#swiftui-项目结构解析" aria-label="Permalink to &quot;SwiftUI 项目结构解析&quot;">​</a></h1><p>SwiftUI 项目的结构与传统 UIKit 项目略有不同，它更强调<strong>声明式编程</strong>和模块化设计。理解 SwiftUI 项目的组织方式，有助于你更高效地构建和维护应用。</p><h2 id="🗂-项目结构总览" tabindex="-1">🗂 项目结构总览 <a class="header-anchor" href="#🗂-项目结构总览" aria-label="Permalink to &quot;🗂 项目结构总览&quot;">​</a></h2><p>以一个默认创建的 SwiftUI 项目为例，Xcode 通常会包含以下几个关键文件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>MySwiftUIApp/</span></span>
<span class="line"><span>├── MySwiftUIAppApp.swift</span></span>
<span class="line"><span>├── ContentView.swift</span></span>
<span class="line"><span>├── Assets.xcassets</span></span>
<span class="line"><span>├── Preview Content/</span></span>
<span class="line"><span>└── Info.plist</span></span></code></pre></div><h2 id="📄-myswiftuiappapp-swift" tabindex="-1">📄 MySwiftUIAppApp.swift <a class="header-anchor" href="#📄-myswiftuiappapp-swift" aria-label="Permalink to &quot;📄 MySwiftUIAppApp.swift&quot;">​</a></h2><p>这是 SwiftUI 项目的入口，使用了 <code>@main</code> 属性修饰的结构体：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySwiftUIAppApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Scene {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        WindowGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>@main</code>：表示应用程序的主入口</li><li><code>App</code> 协议：替代了以前的 <code>AppDelegate</code></li><li><code>WindowGroup</code>：用于表示主窗口的内容区域</li></ul><h2 id="📄-contentview-swift" tabindex="-1">📄 ContentView.swift <a class="header-anchor" href="#📄-contentview-swift" aria-label="Permalink to &quot;📄 ContentView.swift&quot;">​</a></h2><p>这是你的首页界面视图文件，也是 SwiftUI 应用的核心：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, SwiftUI!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以将该文件扩展为主界面视图或作为导航入口。</p><h2 id="🎨-assets-xcassets" tabindex="-1">🎨 Assets.xcassets <a class="header-anchor" href="#🎨-assets-xcassets" aria-label="Permalink to &quot;🎨 Assets.xcassets&quot;">​</a></h2><ul><li>用于存放图像资源、颜色定义和 App 图标。</li><li>SwiftUI 支持动态颜色和暗黑模式，可在资源库中设置。</li></ul><h2 id="📁-preview-content" tabindex="-1">📁 Preview Content/ <a class="header-anchor" href="#📁-preview-content" aria-label="Permalink to &quot;📁 Preview Content/&quot;">​</a></h2><p>用于 SwiftUI 的 Canvas 预览资源（不参与 App 打包）。可以在这里放置一些模拟用的数据资源用于预览视图。</p><h2 id="⚙️-info-plist" tabindex="-1">⚙️ Info.plist <a class="header-anchor" href="#⚙️-info-plist" aria-label="Permalink to &quot;⚙️ Info.plist&quot;">​</a></h2><p>应用的配置信息，包括：</p><ul><li>应用名称、版本号、Bundle ID</li><li>权限说明（相机、定位、网络等）</li><li>启动界面配置</li></ul><h2 id="✅-小贴士-项目模块化建议" tabindex="-1">✅ 小贴士：项目模块化建议 <a class="header-anchor" href="#✅-小贴士-项目模块化建议" aria-label="Permalink to &quot;✅ 小贴士：项目模块化建议&quot;">​</a></h2><ul><li>将每个页面或功能模块单独创建 Swift 文件夹（例如 Views, Models, Services）</li><li>命名建议使用模块名前缀，如 <code>LoginView.swift</code>, <code>UserModel.swift</code></li><li>使用 <code>PreviewProvider</code> 添加预览内容，便于调试与演示</li></ul><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#Preview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过掌握这些基础结构，你可以更轻松地搭建、阅读和扩展一个 SwiftUI 应用。建议在项目初期就建立清晰的文件夹结构和代码规范，让开发事半功倍！</p>`,24)]))}const E=i(n,[["render",p]]);export{c as __pageData,E as default};
